# -*- coding: utf-8 -*-
"""movie-recommendation-system.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/gist/Choccy-kun/57d5734fa3b339f827d5c48595d3cc80/movie-recommendation-system.ipynb

**Movie Recommendation System**
"""

import pandas as pd

import numpy as np

df = pd.read_csv(r'https://raw.githubusercontent.com/YBI-Foundation/Dataset/main/Movies%20Recommendation.csv')

df.head()

df.info()

df.shape

df.columns

"""Feature selection"""

df_features = df[['Movie_Genre','Movie_Keywords','Movie_Tagline','Movie_Cast','Movie_Director','Movie_Budget','Movie_Language']].fillna('')

df_features.shape

df_features

X = df_features['Movie_Genre'] + ' ' + df_features['Movie_Keywords'] + ' ' + df_features['Movie_Tagline'] + ' ' + df_features['Movie_Cast'] + ' ' + df_features['Movie_Director'] + ' ' + df_features['Movie_Language']

X

X.shape

"""Feature text conversion to tokens"""

from sklearn.feature_extraction.text import TfidfVectorizer

tfidf = TfidfVectorizer()

X = tfidf.fit_transform(X)

X.shape

print(X)

"""similiarity score using cosine similiarity"""

from sklearn.metrics.pairwise import cosine_similarity

Similiarity_Score = cosine_similarity(X)

Similiarity_Score

Similiarity_Score.shape

"""Getting movie name from user and also checking closest spellings"""

Favourite_Movie_Name = input(' Enter your favourite movie name: ')

All_Movies_Title_List = df['Movie_Title'].tolist()

import difflib

Movie_Recomendation = difflib.get_close_matches(Favourite_Movie_Name, All_Movies_Title_List)
print(Movie_Recomendation)

Close_Match = Movie_Recomendation[0]
print(Close_Match)

Index_Of_Close_Match_Movie = df[df.Movie_Title == Close_Match]['Movie_ID'].values[0]
print(Index_Of_Close_Match_Movie)

#getting a list of similiar movies
Recommendation_Score = list(enumerate(Similiarity_Score[Index_Of_Close_Match_Movie]))
print(Recommendation_Score)

"""Getting all movies sorted based on recommendation score with respect to my favourite movie"""

#sorting the movies based on their similiarity score
Sorted_Similiar_Movies = sorted(Recommendation_Score, key = lambda x:x[1], reverse= True)
print(Sorted_Similiar_Movies)

#print the name of similiar movies based on the index
print('Top 30 movies suggested for you : \n')

i = 1

for movie in Sorted_Similiar_Movies:
  index = movie[0]
  title_from_index = df[df.index==index]['Movie_Title'].values
  if(i<31):
    print(i, '.',title_from_index)
    i+=1

"""Top 10 movie recommendation system"""

Movie_Name = input('Enter you favourite movie name : ')

list_of_all_titles = df['Movie_Title'].tolist()

Find_Close_Match = difflib.get_close_matches(Movie_Name, list_of_all_titles)

Close_Match = Find_Close_Match[0]

Index_Of_Movie = df[df.Movie_Title == Close_Match]['Movie_ID'].values[0]

Recommendation_Score= list(enumerate(Similiarity_Score[Index_Of_Movie]))

sorted_similiar_movies = sorted(Recommendation_Score, key = lambda x:x[1], reverse = True)

print('Top 10 movies suggested for you: \n')

i=1

for movie in Sorted_Similiar_Movies:
  index = movie[0]
  title_from_index = df[df.Movie_ID==index]['Movie_Title'].values
  if(i<11):
    print(i, '.',title_from_index)
    i+=1